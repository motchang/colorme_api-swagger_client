=begin
#カラーミーショップ API

## カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|\"code\"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ``` 

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::SaleApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SaleApi' do
  before do
    # run before each test
    @instance = SwaggerClient::SaleApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SaleApi' do
    it 'should create an instance of SaleApi' do
      expect(@instance).to be_instance_of(SwaggerClient::SaleApi)
    end
  end

  # unit tests for cancel_sale
  # 受注のキャンセル
  # 受注をキャンセルすると、以下のことが起こります。  - 該当受注の商品購入数が0になる - 該当受注の合計金額が0になる - 該当受注の&#x60;canceled&#x60;が&#x60;true&#x60;になる - 該当受注に使用されたショップポイント・GMOポイントがキャンセルされる - 該当受注の決済がAmazon Pay、または楽天ペイ（オンライン決済）である場合は、決済金額が自動的に購入者へ返金される - カラメル等の販売手数料が0になる 
  # @param sale_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Restock] :restock 
  # @return [InlineResponse2003]
  describe 'cancel_sale test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sale
  # 受注データの取得
  # 
  # @param sale_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'get_sale test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sales
  # 受注データのリストを取得
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ids 受注IDで検索。カンマ区切りで複数指定可能
  # @option opts [String] :after 指定日時以降の受注から検索
  # @option opts [String] :before 指定日時以前の受注から検索
  # @option opts [String] :make_date_min &#x60;after&#x60;と同義
  # @option opts [String] :make_date_max &#x60;before&#x60;と同義
  # @option opts [String] :update_date_min 指定日時以降に更新された受注から検索
  # @option opts [String] :update_date_max 指定日時以降に更新された受注から検索
  # @option opts [String] :customer_ids 購入した顧客IDで検索。カンマ区切りにすることで複数検索が可能
  # @option opts [String] :customer_name 購入した顧客名で部分一致検索
  # @option opts [String] :customer_furigana 購入した顧客フリガナがで部分一致検索
  # @option opts [String] :customer_mail 購入した顧客メールアドレスで部分一致検索
  # @option opts [Integer] :accepted_mail_state 受注メールの送信状態で検索  - &#x60;0&#x60;: 未送信 - &#x60;1&#x60;: 送信済み - &#x60;2&#x60;: 送信しない 
  # @option opts [Integer] :paid_mail_state 入金メールの送信状態で検索  - &#x60;0&#x60;: 未送信 - &#x60;1&#x60;: 送信済み - &#x60;2&#x60;: 送信しない 
  # @option opts [Integer] :delivered_mail_state 配送メールの送信状態で検索  - &#x60;0&#x60;: 未送信 - &#x60;1&#x60;: 送信済み - &#x60;2&#x60;: 送信しない 
  # @option opts [BOOLEAN] :mobile &#x60;true&#x60;なら携帯からの受注のみ取得
  # @option opts [BOOLEAN] :paid &#x60;true&#x60;なら入金済みの受注のみ取得
  # @option opts [BOOLEAN] :delivered &#x60;true&#x60;なら配送済みの受注のみ取得
  # @option opts [String] :payment_ids 使用された決済のIDで検索。カンマ区切りで複数指定可能
  # @option opts [String] :fields レスポンスJSONのキーをカンマ区切りで指定
  # @option opts [Integer] :limit レスポンスの件数を指定。指定がない場合は10。最大50
  # @option opts [Integer] :offset 指定した数値+1件目以降のデータを返す
  # @return [InlineResponse2001]
  describe 'get_sales test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_sales_mail
  # メールの送信
  # 受注・入金確認・商品発送メールを送ることができます。
  # @param sale_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Mail] :mail 
  # @return [nil]
  describe 'send_sales_mail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stat_sale
  # 売上集計の取得
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :make_date 集計対象とする売上の作成日。形式は\&quot;2017-04-12\&quot;、\&quot;2017/04/12\&quot;など。指定しない場合は今日の日付が使われる
  # @return [InlineResponse2002]
  describe 'stat_sale test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_sale
  # 受注データの更新
  # 該当受注の決済がAmazon Pay、または楽天ペイ（オンライン決済）である場合は、熨斗・メッセージカード・ラッピングの手数料を更新すると、決済金額が自動的に購入者に請求もしくは返金されます。
  # @param sale_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Sale] :sale 
  # @return [InlineResponse2003]
  describe 'update_sale test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
